## Model file for network meta-regression with one covariate (change
## from reference), normal likelihood and standardized mean difference
## as summary measure

model {
  
  for (i in 1:k) {
    ##
    w[i, 1] <- 0
    delta[i, T[i, 1]] <- 0
    ##
    ## Normal likelihood
    ##
    for (j in 1:n.k[i]) {
      Y[i, T[i, j]] ~ dnorm(phi[i, T[i, j]], Pr[i, T[i, j]])
      phi[i, T[i, j]] <- (delta.nmr[i, T[i, j]] + u[i]) * pooled.sd[i]
      ##
      delta.nmr[i, T[i, j]] <-
        delta[i, T[i, j]] +
        beta[T[i, 1], T[i, j]] * (Covar[i, T[i, j]] - Covar[i, T[i, 1]])
    }
    ##
    ## Model
    ##
    for (j in 2:n.k[i]) {
      ##
      ## Distribution of random effects (SMD)
      ##
      delta[i, T[i, j]] ~ dnorm(smd[i, T[i, j]], prec.smd[i, T[i, j]])
      ##
      ## Accounting for correlation between effect sizes estimated in
      ## multi-arm trials
      ##
      smd[i, T[i, j]] <- mean[i, j] + sw[i, j]
      w[i, j] <- delta[i, T[i, j]] - mean[i, j]
      sw[i, j] <- sum(w[i, 1:(j - 1)]) / (j - 1)
      prec.smd[i, T[i, j]] <- prec * 2 * (j - 1) / j
      ##
      ## Consistency equations
      ##
      mean[i, j] <- d[T[i, j]] - d[T[i, 1]]
    }
  }
  
  
  ##
  ## Prior distribution in baseline arm of study i
  ##
  for (i in 1:k) {
    u[i] ~ dnorm(0, 0.0001)
  }
  ##
  ## Prior distribution for heterogeneity
  ##
  tau ~ dunif(0, 5)
  tau.sq <- pow(tau, 2)
  prec <- 1 / tau.sq
  ##
  ## Prior distribution for basic parameters
  ##
  d[1] <- 0
  for (i in 2:n) {
    d[i] ~ dnorm(0, 0.0001)
  }
  ##
  ## Prior distribution for regression coefficients
  ##
  b[1] <- 0
  for (i in 2:n) {
    b[i] ~ dnorm(0, 0.0001)
  }
  
  
  ##
  ## SMDs for comparisons
  ##
  for (i in 1:(n - 1)) {
    for (j in (i + 1):n) {
      SMD[j, i] <- d[j] - d[i]
    }
  }
  ##
  ## SMD matrix for all pairwise comparisons
  ##
  for (i in 1:n) {
    for (j in 1:n) {
      SMD.full[i, j] <- d[i] - d[j]
    }
  }
  ##
  ## Regression coefficients
  ##
  for(i in 1:n) {
    for (j in 1:n) {
      beta[i, j] <- b[j] - b[i]
    }
  }
  
  
  ##
  ## Predictions
  ##
  for (i in 1:(n - 1)) {
    for (j in (i + 1):n) {
      predSMD[j, i] ~ dnorm(SMD[j, i], prec)
    }
  }
  ##
  for (i in 1:n) {
    for (j in 1:n) {
      predSMD.full[i, j] ~ dnorm(SMD.full[i, j], prec)
    }
  }
  
  
  ##
  ## Treatment hierarchy
  ##
  order[1:n] <- rank(d[1:n])
  ##
  ## This is when the outcome is positive - omit 'n + 1 -' when the
  ## outcome is negative
  ##
  for (i in 1:n) {
    most.effective[i] <- equals(order[i], 1)
    for (j in 1:n) {
      effectiveness[i, j] <- equals(order[i], j)
    }
  }
  ##
  for (i in 1:n) {
    for (j in 1:n) {
      cumeffectiveness[i, j] <- sum(effectiveness[i, 1:j])
    }
  }
  ##
  ## SUCRAS
  ##
  for (i in 1:n) {
    SUCRA[i] <- sum(cumeffectiveness[i, 1:(n - 1)]) / (n - 1)
  }
}
