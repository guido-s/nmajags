% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/long2jags.R
\name{long2jags}
\alias{long2jags}
\title{Transform data from long arm-based to JAGS
format}
\usage{
long2jags(
  studlab,
  treat,
  event,
  n,
  mean,
  sd,
  data = NULL,
  reference.group = 1,
  addvar,
  func = "max",
  quiet = FALSE
)
}
\arguments{
\item{studlab}{A vector with study labels (mandatory).}

\item{treat}{A vector with treatment labels (mandatory).}

\item{event}{Number of events.}

\item{n}{Number of observations.}

\item{mean}{Estimated mean.}

\item{sd}{Standard deviation.}

\item{data}{An optional data frame containing the study
information.}

\item{reference.group}{Reference treatment.}

\item{addvar}{Additional covariable to use in network
meta-regression.}

\item{func}{A character string specifying function to summarize
data for additional covariate. Either, "min", "max" or "mean",
can be abbreviated.}

\item{quiet}{A logical indicating whether information on changes in
treatment labels should be printed.}
}
\value{
A list of class \code{jagsdata} readable in JAGS.
}
\description{
This function transforms data from long arm-based format, i.e., two
rows for a pairwise comparison, to a list format for Bayesian
network meta-analysis using JAGS.
}
\details{
This function transforms data from long arm-based format, i.e., two
rows for a pairwise comparison, to a list format for Bayesian
network meta-analysis using JAGS.

The function can be used to transform data with a binary or
continuous outcome. Arguments \code{studlab} and \code{treat} are
mandatory to identify studies and treatments and, depending on the
outcome, the following additional arguments are mandatory:

\itemize{
\item \code{event}, \code{n} (binary outcome);
\item \code{n}, \code{mean}, \code{sd} (continuous outcome).
}
}
\examples{
\dontrun{
library(netmeta)
data(Dogliotti2014)
Dogliotti2014$trt <- treats(Dogliotti2014$treatment, nchar = 4)
#
p1 <- pairwise(trt, stroke, total, studlab = study,
               data = Dogliotti2014, sm = "OR")

# Standard frequentist random effects NMA model
#
n1.iv <- netmeta(p1)

# Standard Bayesian random effects NMA model
#
library(R2jags)
#
# Transform long-arm based data into a list suitable for JAGS
# analysis, with first treatment (here: Apixaban) as reference
# treatment, i.e., t = 1
#
dat.jags <- long2jags(id, trt,
                      event = stroke, n = total,
                      data = Dogliotti2014, 
                      reference = n1.iv$trts[1])
dat.jags
#
# Run JAGS and create JAGS object (run 10.000 iterations and
# 1.000 burn-in) monitor the nodes LOR and tau
#
n1.jags <- netjags(dat.jags)
#
# Print results
#
print(n1.jags, digits = 2)

# Extract lnOR from Bayesian NMA
#
TE.random <- n1.jags$BUGSoutput$mean$LOR.full
rownames(TE.random) <- rownames(n1.iv$TE.random)
colnames(TE.random) <- colnames(n1.iv$TE.random)

# Extract se(lnOR) from Bayesian NMA
#
seTE.random <- n1.jags$BUGSoutput$sd$LOR.full
rownames(seTE.random) <- rownames(n1.iv$seTE.random)
colnames(seTE.random) <- colnames(n1.iv$seTE.random)

# Conduct frequentist NMA with tau from Bayesian NMA
#
tau.jags <- as.numeric(n1.jags$BUGSoutput$mean$tau)
n1.iv.jags <-
  suppressWarnings(netmeta(p1, tau.preset = tau.jags))

# Print treatment matrix for frequentist NMA
#
round(n1.iv$TE.random, 3)

# Print treatment matrix for Bayesian NMA
#
round(TE.random, 3)

# Print treatment matrix for frequentist NMA
# (using tau from Bayesian NMA)
#
round(n1.iv.jags$TE.random, 3)

# Print standard errors from frequentist NMA
#
round(n1.iv$seTE.random, 3)

# Print standard errors from Bayesian NMA
#
round(seTE.random, 3)

# Print standard errors from frequentist NMA
# (using tau from Bayesian NMA)
#
round(n1.iv.jags$seTE.random, 3)

# Print square root of between-study heterogeneity tau2
#
tau.jags
n1.iv$tau
}

}
\seealso{
\code{\link{netjags}}, \code{\link[netmeta]{netmeta}}
}
\author{
Georgia Salanti \email{georgia.salanti@ispm.unibe.ch},
  Guido Schwarzer \email{sc@imbi.uni-freiburg.de}
}
\keyword{datagen}
